services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
    ports:
      - "1433:1433"
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "YourStrong@Passw0rd", "-Q", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 10

  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc -w 2 localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /bitnami/zookeeper/data  # Usa tmpfs para evitar persistencia

  kafka:
    image: bitnami/kafka:3.5.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT_TIMEOUT_MS=60000
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /bitnami/kafka/data  # Usa tmpfs para evitar persistencia

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 10

  splunk:
    image: splunk/splunk:latest
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_PASSWORD=admin123
      - SPLUNK_GENERAL_TERMS=--accept-sgt-current-at-splunk-com
    ports:
      - "8000:8000"
      - "9997:9997"
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 10

  config-server:
    build:
      context: ./microservice-academy-config-server
      dockerfile: Dockerfile
    ports:
      - "8890:8890"
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8890/actuator/health"]
      interval: 60s  # Aumentado
      timeout: 20s   # Aumentado
      retries: 15

  eureka-server:
    build:
      context: ./microservice-academy-eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 10

  auth-service:
    build:
      context: ./microservice-academy-auth-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 10

  student-service:
    build:
      context: ./microservice-academy-students
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - academy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 10

networks:
  academy-network:
    driver: bridge